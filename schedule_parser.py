import os
from datetime import datetime, timedelta, date
from config import FACULTIES, TZ, BASE_DIR
import openpyxl
import xlrd
import re

BASE_DIR = os.path.join(os.path.dirname(__file__), "sheets")
print("BASE_DIR =", BASE_DIR)
print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ BASE_DIR:", os.listdir(BASE_DIR))

DAY_MAP = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
    "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
    "—Å—Ä–µ–¥–∞": 2,
    "—á–µ—Ç–≤–µ—Ä–≥": 3,
    "–ø—è—Ç–Ω–∏—Ü–∞": 4,
    "—Å—É–±–±–æ—Ç–∞": 5,
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
}

RUS_DAYS_SHORT = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
RUS_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

def is_even_week(target_date: datetime) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ (—É—á–µ–±–Ω—ã–π —Å–µ–º–µ—Å—Ç—Ä –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ—á–µ—Ç–Ω–æ–π)"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∏–≤–Ω—ã–π datetime –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    if target_date.tzinfo is not None:
        naive_date = target_date.replace(tzinfo=None)
    else:
        naive_date = target_date
    
    # –£—á–µ–±–Ω—ã–π –≥–æ–¥ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ—á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –≤ —Å–µ–Ω—Ç—è–±—Ä–µ
    if naive_date.month >= 9:  # –° —Å–µ–Ω—Ç—è–±—Ä—è –ø–æ –¥–µ–∫–∞–±—Ä—å
        start_year = naive_date.year
        start_date = datetime(start_year, 9, 1)
    else:  # –° —è–Ω–≤–∞—Ä—è –ø–æ –∞–≤–≥—É—Å—Ç
        start_year = naive_date.year - 1
        start_date = datetime(start_year, 9, 1)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–µ–Ω—Ç—è–±—Ä—è
    while start_date.weekday() != 0:  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        start_date += timedelta(days=1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –Ω–µ–¥–µ–ª—è—Ö
    delta = naive_date - start_date
    weeks_passed = delta.days // 7
    
    # –ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è = –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –Ω–µ–¥–µ–ª—å
    return weeks_passed % 2 == 1

def get_schedule_file_path(faculty: str, course: int, is_even: bool) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    week_folder = "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if is_even else "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
    faculty_abbr = FACULTIES[faculty]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = os.path.join(BASE_DIR, week_folder, faculty)
    
    print(f"üîç –ò—â–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø—É—Ç–∏: {base_path}")
    print(f"üìÅ –§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}, –∫—É—Ä—Å: {course}, –Ω–µ–¥–µ–ª—è: {'—á–µ—Ç–Ω–∞—è' if is_even else '–Ω–µ—á–µ—Ç–Ω–∞—è'}")
    
    if not os.path.exists(base_path):
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")
        return None
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
    files_found = []
    for file in os.listdir(base_path):
        if file.endswith(('.xls', '.xlsx')):
            files_found.append(file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—É—Ä—Å—É
            if f"{course} –∫—É—Ä—Å" in file:
                file_path = os.path.join(base_path, file)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª: {file_path}")
                return file_path
    
    print(f"‚ùå –§–∞–π–ª –¥–ª—è –∫—É—Ä—Å–∞ {course} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {files_found}")
    return None

def load_schedule(file_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not file_path or not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        return None
        
    ext = os.path.splitext(file_path)[1].lower()
    data = []

    try:
        if ext == ".xlsx":
            wb = openpyxl.load_workbook(file_path)
            sheet = wb.active
            for row in sheet.iter_rows(values_only=True):
                data.append([cell if cell is not None else "" for cell in row])
        elif ext == ".xls":
            wb = xlrd.open_workbook(file_path)
            sheet = wb.sheet_by_index(0)
            for r in range(sheet.nrows):
                data.append([sheet.cell_value(r, c) if sheet.cell_value(r, c) else "" for c in range(sheet.ncols)])
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None
        
    return data

def get_available_groups(faculty: str, course: int) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞"""
    print(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è {faculty}, –∫—É—Ä—Å {course}")
    
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–µ—á–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é, –ø–æ—Ç–æ–º —á–µ—Ç–Ω—É—é
    for is_even in [False, True]:
        file_path = get_schedule_file_path(faculty, course, is_even)
        if not file_path:
            continue
            
        schedule_data = load_schedule(file_path)
        if not schedule_data:
            continue
            
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≥—Ä—É–ø–ø (–≥–¥–µ –µ—Å—Ç—å "–î–µ–Ω—å" –∏ "–ß–∞—Å—ã")
        for row_idx, row in enumerate(schedule_data):
            if len(row) > 2:
                first_cell = str(row[0]).lower() if row[0] else ""
                second_cell = str(row[1]).lower() if row[1] else ""
                
                if "–¥–µ–Ω—å" in first_cell and "—á–∞—Å—ã" in second_cell:
                    # –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã
                    groups = []
                    for col_idx, cell in enumerate(row[2:], start=2):
                        cell_str = str(cell).strip()
                        if cell_str and cell_str not in ["–î–µ–Ω—å", "–ß–∞—Å—ã"] and not cell_str.isspace():
                            groups.append(cell_str)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {groups}")
                    return groups if groups else []
    
    print("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    return []

def find_group_column(schedule_data: list, group_name: str) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    if not schedule_data:
        return -1
        
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≥—Ä—É–ø–ø
    for row in schedule_data:
        if len(row) > 2:
            first_cell = str(row[0]).lower() if row[0] else ""
            second_cell = str(row[1]).lower() if row[1] else ""
            
            if "–¥–µ–Ω—å" in first_cell and "—á–∞—Å—ã" in second_cell:
                # –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—â–µ–º –Ω–∞—à—É –≥—Ä—É–ø–ø—É
                for col_idx, cell in enumerate(row[2:], start=2):
                    if str(cell).strip() == group_name:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}: {col_idx}")
                        return col_idx
                break
                
    print(f"‚ùå –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return -1

def find_schedule_for_group(schedule_data: list, group_column: int, target_date: datetime):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not schedule_data or group_column < 0:
        return []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∏–≤–Ω—ã–π datetime –¥–ª—è –ø–æ–∏—Å–∫–∞
    if target_date.tzinfo is not None:
        search_date = target_date.replace(tzinfo=None)
    else:
        search_date = target_date
    
    day_rus = {
        "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫", 
        "wednesday": "—Å—Ä–µ–¥–∞",
        "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "saturday": "—Å—É–±–±–æ—Ç–∞",
        "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[search_date.strftime("%A").lower()]
    
    day_variants = [
        str(search_date.day),
        f"{search_date.day}.{search_date.month}",
        f"{search_date.day}/{search_date.month}",
        search_date.strftime("%d.%m"),
        search_date.strftime("%d/%m"),
        day_rus
    ]
    
    print(f"üîç –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É: {search_date.strftime('%d.%m.%Y')}")
    print(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞: {day_variants}")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π
    found_index = -1
    for i, row in enumerate(schedule_data):
        if row and row[0]:
            cell = str(row[0]).lower()
            if any(d in cell for d in day_variants):
                found_index = i
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π: —Å—Ç—Ä–æ–∫–∞ {i}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{row[0]}'")
                break
    
    if found_index == -1:
        print(f"‚ùå –î–∞—Ç–∞ {search_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        return []
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã
    lessons = []
    current_time = None
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π
    i = found_index
    while i < len(schedule_data):
        row = schedule_data[i]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
        time = row[1] if len(row) > 1 else ""
        subject_cell = row[group_column] if len(row) > group_column else ""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è - –æ–±–Ω–æ–≤–ª—è–µ–º current_time
        if time and str(time).strip():
            current_time = str(time).strip()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–µ - –¥–æ–±–∞–≤–ª—è–µ–º
        if current_time and subject_cell and str(subject_cell).strip():
            subject_text = str(subject_cell)
            subject_lines = []
            
            for line in subject_text.split('\n'):
                cleaned_line = line.strip().lstrip('-').strip()
                if cleaned_line:
                    subject_lines.append(cleaned_line)
            
            if subject_lines:
                lessons.append((current_time, subject_lines))
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞: {current_time} - {subject_lines}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        i += 1
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
        if i < len(schedule_data) and schedule_data[i] and schedule_data[i][0]:
            next_cell = str(schedule_data[i][0]).lower()
            if any(d in next_cell for d in day_variants) or any(day in next_cell for day in DAY_MAP.keys()):
                break
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(lessons)} –ø–∞—Ä –¥–ª—è –¥–∞—Ç—ã {search_date.strftime('%d.%m.%Y')}")
    return lessons

def get_day_schedule(faculty: str, course: int, group: str, command: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    now = datetime.now(TZ)
    print(f"üéØ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {faculty}, –∫—É—Ä—Å {course}, –≥—Ä—É–ø–ø–∞ {group}, –∫–æ–º–∞–Ω–¥–∞ '{command}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–Ω–µ–π
    if command == "—Å–µ–≥–æ–¥–Ω—è":
        shift = 0
    elif command == "–∑–∞–≤—Ç—Ä–∞":
        shift = 1
    else:
        days_map = {"–ø–Ω": 0, "–≤—Ç": 1, "—Å—Ä": 2, "—á—Ç": 3, "–ø—Ç": 4, "—Å–±": 5, "–≤—Å": 6}
        today = now.weekday()
        shift = (days_map.get(command, 0) - today) % 7
        if shift < 0:
            shift += 7
    
    target_date = now + timedelta(days=shift)
    is_even = is_even_week(target_date)
    
    print(f"üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}")
    print(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–µ–¥–µ–ª—è: {'—á–µ—Ç–Ω–∞—è' if is_even else '–Ω–µ—á–µ—Ç–Ω–∞—è'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    file_path = get_schedule_file_path(faculty, course, is_even)
    if not file_path:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –Ω–µ–¥–µ–ª—é
        is_even = not is_even
        print(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –Ω–µ–¥–µ–ª—é: {'—á–µ—Ç–Ω–∞—è' if is_even else '–Ω–µ—á–µ—Ç–Ω–∞—è'}")
        file_path = get_schedule_file_path(faculty, course, is_even)
        if not file_path:
            error_msg = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(error_msg)
            return error_msg
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    schedule_data = load_schedule(file_path)
    if not schedule_data:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        print(error_msg)
        return error_msg
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±–µ—Ü –≥—Ä—É–ø–ø—ã
    group_column = find_group_column(schedule_data, group)
    if group_column == -1:
        error_msg = f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        print(error_msg)
        return error_msg
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    lessons = find_schedule_for_group(schedule_data, group_column, target_date)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return format_schedule(lessons, is_even, target_date, group)

def format_schedule(lessons, is_even, date, group):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∏–≤–Ω—ã–π datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if date.tzinfo is not None:
        format_date = date.replace(tzinfo=None)
    else:
        format_date = date
        
    week_str = "–ß–µ—Ç–Ω–∞—è" if is_even else "–ù–µ—á–µ—Ç–Ω–∞—è"
    day_short = RUS_DAYS_SHORT[format_date.weekday()]
    month_rus = RUS_MONTHS[format_date.month]
    month_rus = month_rus[0].upper() + month_rus[1:]
    date_str = f"{day_short} {format_date.day} {month_rus}"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    escaped_week = escape_markdown(week_str)
    escaped_group = escape_markdown(group)
    escaped_date = escape_markdown(date_str)
    
    result = [
        f"*üìÖ {escaped_week} –Ω–µ–¥–µ–ª—è*",
        f"*üë• {escaped_group}*",
        "",
        f"üü¢__*{escaped_date}*__",
        "",
    ]
    
    if not lessons:
        result.append("‚ùå *–ü–∞—Ä –Ω–µ—Ç*")
    else:
        for time, subject_lines in lessons:
            escaped_time = escape_markdown(time)
            result.append(f"*‚è∞ {escaped_time}*")
            
            for line in subject_lines:
                escaped_line = escape_markdown(line)
                result.append(f"\\- {escaped_line}")
            result.append("")

    return "\n".join(result)
