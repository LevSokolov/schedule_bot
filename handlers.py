from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import FACULTIES, GROUP_CHAT_ID, update_user_data, remove_user_data, get_user_data
from states import Registration
from schedule_parser import get_day_schedule, get_available_groups
import os

router = Router()
bot = Bot(token=os.getenv("BOT_TOKEN") or "8374624798:AAFNHcfxnWEz5hKHsAh5BAfr_mFB16nJ8qw")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
def get_faculties_keyboard():
    buttons = []
    row = []
    for faculty in FACULTIES.keys():
        row.append(KeyboardButton(text=faculty))
        if len(row) == 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            buttons.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        buttons.append(row)
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫—É—Ä—Å–æ–≤
def get_courses_keyboard():
    buttons = [
        [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
        [KeyboardButton(text="4"), KeyboardButton(text="5")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_schedule_keyboard():
    buttons = [
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–ü–Ω"), KeyboardButton(text="–í—Ç"), KeyboardButton(text="–°—Ä")],
        [KeyboardButton(text="–ß—Ç"), KeyboardButton(text="–ü—Ç"), KeyboardButton(text="–°–±")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    user_id = message.from_user.id
    old_user_data = await get_user_data(user_id)
    
    if old_user_data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
        try:
            admin_message = (
                f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–ò–º—è: {old_user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"Username: {old_user_data.get('username', '–Ω–µ—Ç username')}\n"
                f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {old_user_data.get('faculty', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ö—É—Ä—Å: {old_user_data.get('course', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ì—Ä—É–ø–ø–∞: {old_user_data.get('group', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            await bot.send_message(chat_id=GROUP_CHAT_ID, text=admin_message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        await remove_user_data(user_id)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=get_faculties_keyboard()
    )
    await state.set_state(Registration.choosing_faculty)

# –í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.message(Registration.choosing_faculty, F.text.in_(FACULTIES.keys()))
async def faculty_chosen(message: Message, state: FSMContext):
    faculty = message.text
    await state.update_data(faculty=faculty)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:",
        reply_markup=get_courses_keyboard()
    )
    await state.set_state(Registration.choosing_course)

# –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.message(Registration.choosing_faculty)
async def wrong_faculty(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=get_faculties_keyboard()
    )

# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@router.message(Registration.choosing_course, F.text.in_(["1", "2", "3", "4", "5"]))
async def course_chosen(message: Message, state: FSMContext):
    course = message.text
    data = await state.get_data()
    faculty = data['faculty']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞
    groups = get_available_groups(faculty, int(course))
    
    if not groups:
        await message.answer(
            f"–î–ª—è {faculty} {course} –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å –∏–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
            reply_markup=get_courses_keyboard()
        )
        return
    
    await state.update_data(course=course, available_groups=groups)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    group_buttons = []
    row = []
    for group in groups:
        row.append(KeyboardButton(text=group))
        if len(row) == 3:  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            group_buttons.append(row)
            row = []
    if row:
        group_buttons.append(row)
    
    group_keyboard = ReplyKeyboardMarkup(
        keyboard=group_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
        reply_markup=group_keyboard
    )
    await state.set_state(Registration.choosing_group)

# –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
@router.message(Registration.choosing_course)
async def wrong_course(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 5:",
        reply_markup=get_courses_keyboard()
    )

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@router.message(Registration.choosing_group)
async def group_chosen(message: Message, state: FSMContext):
    group = message.text
    data = await state.get_data()
    available_groups = data.get('available_groups', [])
    
    if group not in available_groups:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user_info = {
        'faculty': data['faculty'],
        'course': data['course'],
        'group': group,
        'username': f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç username",
        'full_name': message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
    
    await update_user_data(user_id, user_info)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    admin_message = (
        f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"–ò–º—è: {user_info['full_name']}\n"
        f"Username: {user_info['username']}\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_info['faculty']}\n"
        f"–ö—É—Ä—Å: {user_info['course']}\n"
        f"–ì—Ä—É–ø–ø–∞: {user_info['group']}"
    )
    
    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            await bot.send_message(chat_id=str(GROUP_CHAT_ID), text=admin_message)
        except Exception as e2:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (—Å—Ç—Ä–æ–∫–∞): {e2}")
    
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {data['faculty']}\n"
        f"–ö—É—Ä—Å: {data['course']}\n"
        f"–ì—Ä—É–ø–ø–∞: {group}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=get_schedule_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(F.text.lower().in_({"—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"}))
async def day_selected(message: Message):
    user_id = message.from_user.id
    user_info = await get_user_data(user_id)
    
    if not user_info:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    text = message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_text = get_day_schedule(
        user_info['faculty'],
        int(user_info['course']),
        user_info['group'],
        text
    )
    
    await message.answer(schedule_text, parse_mode=ParseMode.MARKDOWN_V2)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("reset"))
async def reset_cmd(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if await remove_user_data(user_id):
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("me"))
async def me_cmd(message: Message):
    user_id = message.from_user.id
    user_info = await get_user_data(user_id)
    
    if user_info:
        response = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_info['faculty']}\n"
            f"–ö—É—Ä—Å: {user_info['course']}\n"
            f"–ì—Ä—É–ø–ø–∞: {user_info['group']}"
        )
    else:
        response = "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    
    await message.answer(response)
