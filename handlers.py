from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
import os

from config import FACULTIES, GROUP_CHAT_ID, add_or_update_user, get_user, remove_user, create_db_pool
from states import Registration
from schedule_parser import get_day_schedule, get_available_groups

router = Router()
bot = Bot(token=os.getenv("BOT_TOKEN"))

# ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================
def get_faculties_keyboard():
    buttons, row = [], []
    for faculty in FACULTIES.keys():
        row.append(KeyboardButton(text=faculty))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def get_courses_keyboard():
    buttons = [
        [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
        [KeyboardButton(text="4"), KeyboardButton(text="5")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def get_schedule_keyboard():
    buttons = [
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–ü–Ω"), KeyboardButton(text="–í—Ç"), KeyboardButton(text="–°—Ä")],
        [KeyboardButton(text="–ß—Ç"), KeyboardButton(text="–ü—Ç"), KeyboardButton(text="–°–±")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=False)

# ====================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ======================
@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    pool = await create_db_pool()
    user_id = message.from_user.id
    old_user = await get_user(pool, user_id)

    if old_user:
        await remove_user(pool, user_id)
        try:
            await bot.send_message(
                GROUP_CHAT_ID,
                f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–ò–º—è: {old_user['full_name']}\n"
                f"Username: {old_user['username']}\n"
                f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {old_user['faculty']}\n"
                f"–ö—É—Ä—Å: {old_user['course']}\n"
                f"–ì—Ä—É–ø–ø–∞: {old_user['user_group']}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=get_faculties_keyboard())
    await state.set_state(Registration.choosing_faculty)

@router.message(Registration.choosing_faculty, F.text.in_(FACULTIES.keys()))
async def faculty_chosen(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:", reply_markup=get_courses_keyboard())
    await state.set_state(Registration.choosing_course)

@router.message(Registration.choosing_faculty)
async def wrong_faculty(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", reply_markup=get_faculties_keyboard())

@router.message(Registration.choosing_course, F.text.in_(["1", "2", "3", "4", "5"]))
async def course_chosen(message: Message, state: FSMContext):
    course = message.text
    data = await state.get_data()
    faculty = data["faculty"]

    groups = get_available_groups(faculty, int(course))
    if not groups:
        await message.answer(
            f"–î–ª—è {faculty} {course} –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.",
            reply_markup=get_courses_keyboard()
        )
        return

    await state.update_data(course=course, available_groups=groups)

    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥—Ä—É–ø–ø
    group_buttons, row = [], []
    for group in groups:
        row.append(KeyboardButton(text=group))
        if len(row) == 3:
            group_buttons.append(row)
            row = []
    if row:
        group_buttons.append(row)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=ReplyKeyboardMarkup(keyboard=group_buttons, resize_keyboard=True, one_time_keyboard=True))
    await state.set_state(Registration.choosing_group)

@router.message(Registration.choosing_course)
async def wrong_course(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 5:", reply_markup=get_courses_keyboard())

@router.message(Registration.choosing_group)
async def group_chosen(message: Message, state: FSMContext):
    pool = await create_db_pool()
    group = message.text
    data = await state.get_data()
    available_groups = data.get("available_groups", [])

    if group not in available_groups:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    user_info = {
        "faculty": data["faculty"],
        "course": data["course"],
        "user_group": group,
        "username": f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç username",
        "full_name": message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    }

    await add_or_update_user(pool, message.from_user.id, user_info)

    admin_message = (
        f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"–ò–º—è: {user_info['full_name']}\n"
        f"Username: {user_info['username']}\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_info['faculty']}\n"
        f"–ö—É—Ä—Å: {user_info['course']}\n"
        f"–ì—Ä—É–ø–ø–∞: {user_info['user_group']}"
    )

    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_info['faculty']}\n"
        f"–ö—É—Ä—Å: {user_info['course']}\n"
        f"–ì—Ä—É–ø–ø–∞: {user_info['user_group']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=get_schedule_keyboard()
    )
    await state.clear()

# ====================== –†–ê–°–ü–ò–°–ê–ù–ò–ï ======================
@router.message(F.text.lower().in_({"—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"}))
async def day_selected(message: Message):
    pool = await create_db_pool()
    user = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start", reply_markup=ReplyKeyboardRemove())
        return

    schedule_text = get_day_schedule(user["faculty"], int(user["course"]), user["user_group"], message.text.lower())
    await message.answer(schedule_text, parse_mode=ParseMode.MARKDOWN_V2)

# ====================== –ü–†–û–ß–ï–ï ======================
@router.message(Command("reset"))
async def reset_cmd(message: Message, state: FSMContext):
    pool = await create_db_pool()
    deleted = await remove_user(pool, message.from_user.id)
    if deleted:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.message(Command("me"))
async def me_cmd(message: Message):
    pool = await create_db_pool()
    user = await get_user(pool, message.from_user.id)
    if user:
        text = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user['faculty']}\n"
            f"–ö—É—Ä—Å: {user['course']}\n"
            f"–ì—Ä—É–ø–ø–∞: {user['user_group']}"
        )
    else:
        text = "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
    await message.answer(text)
